name: Threading Validation Tests

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'quarkus-websocket-service/**'
      - 'vep-service/**'
      - '.github/workflows/threading-validation.yml'
  push:
    branches: [ main ]
    paths:
      - 'quarkus-websocket-service/**'
      - 'vep-service/**'
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope to run'
        required: false
        default: 'threading'
        type: choice
        options:
          - threading
          - all
          - specific

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  threading-validation:
    name: Threading Validation Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Validate Maven wrapper and scripts
      run: |
        cd quarkus-websocket-service
        chmod +x mvnw
        cd ../vep-service
        chmod +x mvnw
        cd ..
        chmod +x scripts/test-local-setup.sh
        chmod +x scripts/test-local-integration.sh

    - name: Setup local testing environment
      run: |
        echo "🧪 Setting up local testing environment..."

        # Install podman-compose for local Kafka setup
        pip install podman-compose

        # Setup local Kafka cluster for testing (includes all 4 scaling mode topics)
        ./scripts/test-local-setup.sh

        # Wait for Kafka to be fully ready
        echo "⏳ Waiting for Kafka cluster to be ready..."
        sleep 15

        # Verify Kafka is working and all scaling mode topics exist
        if ! podman exec test-kafka kafka-topics --list --bootstrap-server localhost:9092 > /dev/null 2>&1; then
          echo "❌ Kafka setup failed"
          exit 1
        fi

        # Validate separation of concerns - ensure all 4 scaling mode topics exist
        REQUIRED_TOPICS=("genetic-data-raw" "genetic-bigdata-raw" "genetic-nodescale-raw" "genetic-lag-demo-raw")
        TOPIC_LIST=$(podman exec test-kafka kafka-topics --list --bootstrap-server localhost:9092)

        for topic in "${REQUIRED_TOPICS[@]}"; do
          if echo "$TOPIC_LIST" | grep -q "^$topic$"; then
            echo "✅ Scaling mode topic verified: $topic"
          else
            echo "❌ Missing scaling mode topic: $topic"
            exit 1
          fi
        done

        echo "✅ Kafka cluster ready with all 4 scaling mode topics"

    - name: Compile projects with local configuration
      run: |
        echo "🔨 Compiling projects with local test configuration..."

        # Use the integration script to setup proper configurations
        ./scripts/test-local-integration.sh vep-only &
        VEP_SETUP_PID=$!

        # Wait for VEP service to compile and start
        sleep 30

        # Kill the VEP service (we just needed the compilation and config)
        kill $VEP_SETUP_PID 2>/dev/null || true

        echo "🔨 Compiling WebSocket Service..."
        cd quarkus-websocket-service
        ./mvnw clean compile test-compile -B

        echo "✅ Compilation completed with local configuration"

    - name: Validate separation of concerns before testing
      run: |
        echo "🔍 Validating separation of concerns before threading tests..."

        # Check that all 4 scaling modes are properly configured
        WEBSOCKET_SERVICE="quarkus-websocket-service/src/main/java/com/redhat/healthcare/GeneticPredictorEndpoint.java"

        # Validate Java switch cases exist for all modes
        EXPECTED_MODES=("normal" "big-data" "node-scale" "kafka-lag")
        for mode in "${EXPECTED_MODES[@]}"; do
          if grep -q "case \"$mode\":" "$WEBSOCKET_SERVICE"; then
            echo "✅ Java mode case found: $mode"
          else
            echo "❌ Missing Java mode case: $mode"
            exit 1
          fi
        done

        # Validate Kafka topic configurations
        APP_PROPS="quarkus-websocket-service/src/main/resources/application.properties"
        EXPECTED_TOPICS=("genetic-data-raw" "genetic-bigdata-raw" "genetic-nodescale-raw" "genetic-lag-demo-raw")
        for topic in "${EXPECTED_TOPICS[@]}"; do
          if grep -q "topic=$topic" "$APP_PROPS"; then
            echo "✅ Kafka topic configured: $topic"
          else
            echo "❌ Missing Kafka topic: $topic"
            exit 1
          fi
        done

        echo "✅ Separation of concerns validation passed"

    - name: Run Threading Validation Tests
      id: threading-tests
      run: |
        echo "🧵 Running Threading Validation Tests with Local Environment..."

        # Initialize combined test output
        echo "=== WebSocket Service Threading Tests ===" > threading-test-output.log

        # Create local test configuration for WebSocket service
        cd quarkus-websocket-service
        cat > src/test/resources/application-test.properties << EOF
        # Local testing configuration for GitHub Actions
        quarkus.kafka.devservices.enabled=false
        kafka.bootstrap.servers=localhost:9092

        # Override all messaging channels to use in-memory for unit tests
        mp.messaging.outgoing.genetic-data-raw-out.connector=smallrye-in-memory
        mp.messaging.outgoing.genetic-bigdata-raw-out.connector=smallrye-in-memory
        mp.messaging.outgoing.genetic-nodescale-raw-out.connector=smallrye-in-memory
        mp.messaging.outgoing.genetic-lag-demo-raw-out.connector=smallrye-in-memory
        mp.messaging.incoming.genetic-data-annotated-in.connector=smallrye-in-memory

        # Enable feature flags for testing
        healthcare.ml.features.kafka-lag-mode.enabled=true
        healthcare.ml.features.multi-dimensional-autoscaler.enabled=false

        # Enhanced logging for debugging
        quarkus.log.category."com.redhat.healthcare".level=DEBUG
        EOF

        echo "🧵 Testing WebSocket Service with local configuration..."
        if ./mvnw test -Dtest=ScalingTestControllerTest -B \
          -Dquarkus.profile=test \
          -Dquarkus.log.level=INFO \
          -Dquarkus.log.category."com.redhat.healthcare".level=DEBUG \
          -Dmaven.test.failure.ignore=false \
          >> ../threading-test-output.log 2>&1; then
          WEBSOCKET_EXIT_CODE=0
          echo "✅ WebSocket Service tests passed"
        else
          WEBSOCKET_EXIT_CODE=$?
          echo "❌ WebSocket Service tests failed (exit code: $WEBSOCKET_EXIT_CODE)"
          echo "Last 20 lines of output:" >> ../threading-test-output.log
          tail -20 ../threading-test-output.log
        fi

        # Run VEP service tests with better error handling
        echo "" >> ../threading-test-output.log
        echo "=== VEP Service Threading Tests ===" >> ../threading-test-output.log
        cd ../vep-service
        echo "🧬 Testing VEP Service..."
        if ./mvnw test -B \
          -Dquarkus.log.level=INFO \
          -Dquarkus.log.category."com.redhat.healthcare".level=DEBUG \
          -Dmaven.test.failure.ignore=false \
          >> ../threading-test-output.log 2>&1; then
          VEP_EXIT_CODE=0
          echo "✅ VEP Service tests passed"
        else
          VEP_EXIT_CODE=$?
          echo "❌ VEP Service tests failed (exit code: $VEP_EXIT_CODE)"
          echo "Last 20 lines of output:" >> ../threading-test-output.log
          tail -20 ../threading-test-output.log
        fi

        # Move back to root and determine overall result
        cd ..
        if [ $WEBSOCKET_EXIT_CODE -eq 0 ] && [ $VEP_EXIT_CODE -eq 0 ]; then
          TEST_EXIT_CODE=0
          echo "✅ All tests passed successfully"
        else
          TEST_EXIT_CODE=1
          echo "❌ Some tests failed"

          # Check if this is a compilation/setup issue vs actual test failure
          if grep -q "BUILD FAILURE" threading-test-output.log; then
            echo "⚠️  Build failure detected - may be environment issue, not threading issue"
            echo "Checking for specific threading violations..."

            # If no threading violations found, treat as environment issue
            if ! grep -q "event.*loop.*block\|blocking.*detected" threading-test-output.log; then
              echo "ℹ️  No threading violations detected in logs"
              echo "This appears to be a build/environment issue, not a threading problem"
            fi
          fi
        fi

        echo "WebSocket Service Tests: Exit Code $WEBSOCKET_EXIT_CODE"
        echo "VEP Service Tests: Exit Code $VEP_EXIT_CODE"
        echo "Overall Test Result: Exit Code $TEST_EXIT_CODE"
        
        # Extract threading evidence from logs
        echo "## Threading Validation Results" > threading-report.md
        echo "" >> threading-report.md
        
        # Use safer numeric comparison for exit code
        if [ "${TEST_EXIT_CODE:-1}" -eq 0 ] 2>/dev/null; then
          echo "✅ **Threading Tests: PASSED**" >> threading-report.md
        else
          echo "❌ **Threading Tests: FAILED**" >> threading-report.md
        fi
        
        echo "" >> threading-report.md
        echo "### Thread Execution Analysis" >> threading-report.md
        echo "" >> threading-report.md
        
        # Check for worker thread execution (good) with safe error handling and cleanup
        WORKER_THREADS=$(grep -c "executor-thread" threading-test-output.log 2>/dev/null || echo "0")
        WORKER_THREADS=$(echo "$WORKER_THREADS" | tr -d '\n\r ' | head -1)  # Clean newlines and whitespace
        echo "- **Worker Thread Executions**: $WORKER_THREADS" >> threading-report.md

        # Check for event loop blocking (bad) with safe error handling and cleanup
        EVENT_LOOP_BLOCKS=$(grep -c "vert.x-eventloop-thread" threading-test-output.log 2>/dev/null || echo "0")
        EVENT_LOOP_BLOCKS=$(echo "$EVENT_LOOP_BLOCKS" | tr -d '\n\r ' | head -1)  # Clean newlines and whitespace
        echo "- **Event Loop Thread Usage**: $EVENT_LOOP_BLOCKS" >> threading-report.md

        # Use robust numeric comparison with cleaned variable
        if [ "$EVENT_LOOP_BLOCKS" = "0" ]; then
          echo "- **✅ No Event Loop Blocking Detected**" >> threading-report.md
        else
          echo "- **❌ Event Loop Blocking Detected**" >> threading-report.md
        fi
        
        echo "" >> threading-report.md
        echo "### CloudEvent Processing" >> threading-report.md
        echo "" >> threading-report.md
        
        # Check CloudEvent creation with safe error handling and cleanup
        CLOUDEVENTS_SENT=$(grep -c "Sent.*CloudEvent to Kafka" threading-test-output.log 2>/dev/null || echo "0")
        CLOUDEVENTS_SENT=$(echo "$CLOUDEVENTS_SENT" | tr -d '\n\r ' | head -1)  # Clean newlines and whitespace
        echo "- **CloudEvents Sent**: $CLOUDEVENTS_SENT" >> threading-report.md

        # Check for different event types with safe error handling and cleanup
        RAW_EVENTS=$(grep -c "genetic.sequence.raw" threading-test-output.log 2>/dev/null || echo "0")
        RAW_EVENTS=$(echo "$RAW_EVENTS" | tr -d '\n\r ' | head -1)  # Clean newlines and whitespace
        BIGDATA_EVENTS=$(grep -c "genetic.sequence.bigdata" threading-test-output.log 2>/dev/null || echo "0")
        BIGDATA_EVENTS=$(echo "$BIGDATA_EVENTS" | tr -d '\n\r ' | head -1)  # Clean newlines and whitespace
        echo "- **Raw Events**: $RAW_EVENTS" >> threading-report.md
        echo "- **Big Data Events**: $BIGDATA_EVENTS" >> threading-report.md
        
        echo "" >> threading-report.md
        echo "### Test Summary" >> threading-report.md
        tail -20 threading-test-output.log >> threading-report.md
        
        # Set outputs for later steps with proper quoting
        echo "test_exit_code=${TEST_EXIT_CODE}" >> $GITHUB_OUTPUT
        echo "worker_threads=${WORKER_THREADS}" >> $GITHUB_OUTPUT
        echo "event_loop_blocks=${EVENT_LOOP_BLOCKS}" >> $GITHUB_OUTPUT
        
        exit $TEST_EXIT_CODE

    - name: Cleanup test environment
      if: always()
      run: |
        echo "🧹 Cleaning up test environment..."

        # Stop Kafka cluster
        if [ -f podman-compose.test.yml ]; then
          podman-compose -f podman-compose.test.yml down || true
        fi

        # Clean up any remaining containers
        podman rm -f test-kafka test-zookeeper test-kafka-ui 2>/dev/null || true

        # Clean up test configuration files
        rm -f quarkus-websocket-service/src/test/resources/application-test.properties
        rm -f quarkus-websocket-service/src/main/resources/application-local.properties
        rm -f vep-service/src/main/resources/application-local.properties

        echo "✅ Cleanup completed"

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: threading-test-results
        path: |
          threading-test-output.log
          threading-report.md
          quarkus-websocket-service/target/surefire-reports/
          vep-service/target/surefire-reports/
        retention-days: 30
        
    - name: Comment on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'threading-report.md';
          
          let reportContent = '## 🧵 Threading Validation Report\n\n';
          
          if (fs.existsSync(path)) {
            reportContent += fs.readFileSync(path, 'utf8');
          } else {
            reportContent += '❌ Threading report not generated - check workflow logs.\n';
          }
          
          reportContent += '\n\n---\n';
          reportContent += `**Workflow**: ${context.workflow}\n`;
          reportContent += `**Run ID**: ${context.runId}\n`;
          reportContent += `**Commit**: ${context.sha.substring(0, 7)}\n`;
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.user.login === 'github-actions[bot]' && 
            comment.body.includes('🧵 Threading Validation Report')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: reportContent
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: reportContent
            });
          }
          
    - name: Validate Threading Requirements
      if: always()
      run: |
        echo "🔍 Validating Threading Requirements..."

        # Get outputs with proper quoting and default values
        WORKER_THREADS="${{ steps.threading-tests.outputs.worker_threads }}"
        EVENT_LOOP_BLOCKS="${{ steps.threading-tests.outputs.event_loop_blocks }}"
        TEST_EXIT_CODE="${{ steps.threading-tests.outputs.test_exit_code }}"

        # Clean variables and set safe defaults
        WORKER_THREADS=$(echo "${WORKER_THREADS:-0}" | tr -d ' ' | grep -E '^[0-9]+$' || echo "0")
        EVENT_LOOP_BLOCKS=$(echo "${EVENT_LOOP_BLOCKS:-0}" | tr -d ' ' | grep -E '^[0-9]+$' || echo "0")
        TEST_EXIT_CODE=$(echo "${TEST_EXIT_CODE:-1}" | tr -d ' ' | grep -E '^[0-9]+$' || echo "1")

        echo "Worker Threads: '$WORKER_THREADS'"
        echo "Event Loop Blocks: '$EVENT_LOOP_BLOCKS'"
        echo "Test Exit Code: '$TEST_EXIT_CODE'"

        # Quality gates for threading validation with robust error handling
        if [ "$EVENT_LOOP_BLOCKS" -gt 0 ]; then
          echo "❌ FAIL: Event loop blocking detected ($EVENT_LOOP_BLOCKS occurrences)"
          echo "This violates ADR-004 threading requirements."
          exit 1
        fi

        if [ "$WORKER_THREADS" -eq 0 ]; then
          echo "❌ FAIL: No worker thread execution detected"
          echo "@Blocking annotations may not be working correctly."
          exit 1
        fi

        if [ "$TEST_EXIT_CODE" -ne 0 ]; then
          echo "❌ FAIL: Threading tests failed (exit code: $TEST_EXIT_CODE)"

          # Check if this is a build failure vs threading issue
          if [ -f threading-test-output.log ]; then
            if grep -q "BUILD FAILURE\|compilation failure\|Cannot resolve dependencies" threading-test-output.log; then
              echo "⚠️  Build/compilation failure detected - not a threading issue"
              echo "This may be a temporary environment issue"
              echo "Threading validation cannot be performed due to build failure"
              # Still exit 1 but with different messaging
            else
              echo "This appears to be a genuine test failure"
            fi
          fi
          exit 1
        fi

        echo "✅ SUCCESS: All threading requirements validated"
        echo "- Worker threads: $WORKER_THREADS executions"
        echo "- Event loop blocking: $EVENT_LOOP_BLOCKS (target: 0)"
        echo "- Tests passed: ✅"
        
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: threading-validation
    if: always()
    
    steps:
    - name: Generate Summary
      run: |
        echo "## 🧵 Threading Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.threading-validation.result }}" == "success" ]; then
          echo "✅ **Threading validation passed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All @Blocking annotations are working correctly and no event loop blocking was detected." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Ready for OpenShift deployment** ✅" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Threading validation failed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Threading issues detected. Please review the test results and fix before OpenShift deployment." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**NOT ready for OpenShift deployment** ❌" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ADR Compliance" >> $GITHUB_STEP_SUMMARY
        echo "- **ADR-004**: API Testing and Validation ✅" >> $GITHUB_STEP_SUMMARY
        echo "- **MVP Phase 0**: Local Testing Requirements ✅" >> $GITHUB_STEP_SUMMARY
