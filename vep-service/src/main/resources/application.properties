# VEP Annotation Service Configuration

# Application Info
quarkus.application.name=vep-annotation-service
quarkus.application.version=1.0.0

# HTTP Configuration
quarkus.http.port=8080
quarkus.http.host=0.0.0.0

# Logging Configuration
quarkus.log.level=INFO
quarkus.log.category."com.redhat.healthcare".level=DEBUG
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n

# Health Checks
quarkus.smallrye-health.root-path=/q/health

# Metrics
quarkus.micrometer.enabled=true
quarkus.micrometer.registry-enabled-default=false
quarkus.micrometer.export.prometheus.enabled=true
quarkus.micrometer.export.prometheus.path=/q/metrics

# VEP API Client Configuration
# API Documentation: https://rest.ensembl.org/documentation/info/vep_hgvs_post
# Base URL: https://rest.ensembl.org (Ensembl REST API)
# Endpoint: POST /vep/{species}/hgvs
# Rate Limits: 55,000 requests/hour, 15 requests/second
# Max Variants: 1000 HGVS notations per request
# Response Format: Array of variant objects (NOT single object)
# WHY: Industry standard for variant annotation, free public API
quarkus.rest-client.vep-api.url=https://rest.ensembl.org
quarkus.rest-client.vep-api.timeout=30000
quarkus.rest-client.vep-api.connect-timeout=5000
quarkus.rest-client.vep-api.read-timeout=30000

# Kafka Configuration
kafka.bootstrap.servers=genetic-data-cluster-kafka-bootstrap.healthcare-ml-demo.svc.cluster.local:9092

# Reactive Messaging - Multi-Topic Incoming Configuration
# Normal Mode: Pod scaling only
mp.messaging.incoming.genetic-data-raw.connector=smallrye-kafka
mp.messaging.incoming.genetic-data-raw.topic=genetic-data-raw
mp.messaging.incoming.genetic-data-raw.bootstrap.servers=${kafka.bootstrap.servers}
mp.messaging.incoming.genetic-data-raw.group.id=vep-service-group
mp.messaging.incoming.genetic-data-raw.auto.offset.reset=latest
mp.messaging.incoming.genetic-data-raw.enable.auto.commit=true
mp.messaging.incoming.genetic-data-raw.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Big Data Mode: Memory scaling
mp.messaging.incoming.genetic-bigdata-raw.connector=smallrye-kafka
mp.messaging.incoming.genetic-bigdata-raw.topic=genetic-bigdata-raw
mp.messaging.incoming.genetic-bigdata-raw.bootstrap.servers=${kafka.bootstrap.servers}
mp.messaging.incoming.genetic-bigdata-raw.group.id=vep-bigdata-service-group
mp.messaging.incoming.genetic-bigdata-raw.auto.offset.reset=latest
mp.messaging.incoming.genetic-bigdata-raw.enable.auto.commit=true
mp.messaging.incoming.genetic-bigdata-raw.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Node Scale Mode: Cluster autoscaler
mp.messaging.incoming.genetic-nodescale-raw.connector=smallrye-kafka
mp.messaging.incoming.genetic-nodescale-raw.topic=genetic-nodescale-raw
mp.messaging.incoming.genetic-nodescale-raw.bootstrap.servers=${kafka.bootstrap.servers}
mp.messaging.incoming.genetic-nodescale-raw.group.id=vep-nodescale-service-group
mp.messaging.incoming.genetic-nodescale-raw.auto.offset.reset=latest
mp.messaging.incoming.genetic-nodescale-raw.enable.auto.commit=true
mp.messaging.incoming.genetic-nodescale-raw.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Kafka Lag Mode: Consumer lag-based scaling demonstration
mp.messaging.incoming.genetic-lag-demo-raw.connector=smallrye-kafka
mp.messaging.incoming.genetic-lag-demo-raw.topic=genetic-lag-demo-raw
mp.messaging.incoming.genetic-lag-demo-raw.bootstrap.servers=${kafka.bootstrap.servers}
mp.messaging.incoming.genetic-lag-demo-raw.group.id=genetic-lag-consumer-group
mp.messaging.incoming.genetic-lag-demo-raw.auto.offset.reset=latest
mp.messaging.incoming.genetic-lag-demo-raw.enable.auto.commit=true
mp.messaging.incoming.genetic-lag-demo-raw.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Reactive Messaging - Outgoing (Multiple upstreams merged into single topic)
mp.messaging.outgoing.genetic-data-annotated.connector=smallrye-kafka
mp.messaging.outgoing.genetic-data-annotated.topic=genetic-data-annotated
mp.messaging.outgoing.genetic-data-annotated.bootstrap.servers=${kafka.bootstrap.servers}
mp.messaging.outgoing.genetic-data-annotated.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.genetic-data-annotated.merge=true

# RQ1.1 Solution: Worker Thread Pool Configuration for Java 17
quarkus.thread-pool.max-threads=50
quarkus.thread-pool.core-threads=10

# RQ1.6 Solution: CloudEvent processing optimization
mp.messaging.incoming.genetic-data-raw.max-concurrency=20
smallrye.messaging.worker.max-concurrency=20

# Test Profile - Disable messaging for unit tests
%test.mp.messaging.incoming.genetic-data-raw.connector=smallrye-in-memory
%test.mp.messaging.incoming.genetic-bigdata-raw.connector=smallrye-in-memory
%test.mp.messaging.incoming.genetic-nodescale-raw.connector=smallrye-in-memory
%test.mp.messaging.outgoing.genetic-data-annotated.connector=smallrye-in-memory
%test.quarkus.kafka.devservices.enabled=false

# Cache Configuration - DISABLED to fix threading issues
# Caching was causing blocking operations on event loop threads
# quarkus.cache.caffeine."vep-annotations".initial-capacity=100
# quarkus.cache.caffeine."vep-annotations".maximum-size=1000
# quarkus.cache.caffeine."vep-annotations".expire-after-write=1H

# Security Configuration
quarkus.http.cors=true
quarkus.http.cors.origins=*
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with

# OpenShift Configuration
quarkus.openshift.deployment-kind=knative
quarkus.openshift.build-strategy=docker
quarkus.container-image.build=true
quarkus.container-image.push=true
quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000
quarkus.container-image.group=healthcare-ml-demo
quarkus.container-image.name=vep-service
