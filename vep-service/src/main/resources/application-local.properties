# Local Testing Configuration for VEP Service
# ADR-001: VEP service handles genetic data processing and VEP API calls

# Application Configuration
quarkus.application.name=vep-annotation-service-local
quarkus.application.version=1.0.0-local

# HTTP Configuration (different port to avoid conflict with WebSocket service)
quarkus.http.host=0.0.0.0
quarkus.http.port=8081

# Local Kafka Configuration
kafka.bootstrap.servers=localhost:9092

# Kafka Consumer Configuration - Raw Genetic Data (ADR-001: VEP consumes)
mp.messaging.incoming.genetic-data-raw.connector=smallrye-kafka
mp.messaging.incoming.genetic-data-raw.topic=genetic-data-raw
mp.messaging.incoming.genetic-data-raw.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.genetic-data-raw.bootstrap.servers=${kafka.bootstrap.servers}
mp.messaging.incoming.genetic-data-raw.group.id=vep-annotation-service-group
mp.messaging.incoming.genetic-data-raw.auto.offset.reset=latest
mp.messaging.incoming.genetic-data-raw.enable.auto.commit=true

# Kafka Producer Configuration - Annotated Results (ADR-001: VEP publishes)
mp.messaging.outgoing.genetic-data-annotated.connector=smallrye-kafka
mp.messaging.outgoing.genetic-data-annotated.topic=genetic-data-annotated
mp.messaging.outgoing.genetic-data-annotated.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.genetic-data-annotated.bootstrap.servers=${kafka.bootstrap.servers}

# VEP API Client Configuration
quarkus.rest-client.vep-api.url=https://rest.ensembl.org
quarkus.rest-client.vep-api.timeout=30000
quarkus.rest-client.vep-api.connect-timeout=5000
quarkus.rest-client.vep-api.read-timeout=30000

# Health Check Configuration
quarkus.health.enabled=true
quarkus.health.openapi.included=true

# Metrics Configuration
quarkus.micrometer.enabled=true
quarkus.micrometer.export.prometheus.enabled=true

# Logging Configuration
quarkus.log.level=INFO
quarkus.log.category."com.redhat.healthcare".level=DEBUG
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n

# Cache Configuration for VEP responses
quarkus.cache.caffeine."vep-annotations".initial-capacity=100
quarkus.cache.caffeine."vep-annotations".maximum-size=1000
quarkus.cache.caffeine."vep-annotations".expire-after-write=1H

# Local Kafka Consumer Stability Configuration
mp.messaging.incoming.genetic-data-raw.session.timeout.ms=30000
mp.messaging.incoming.genetic-data-raw.heartbeat.interval.ms=10000
mp.messaging.incoming.genetic-data-raw.max.poll.interval.ms=300000
mp.messaging.incoming.genetic-data-raw.rebalance.timeout.ms=60000

# Development Configuration
quarkus.dev.ui.enabled=true
quarkus.swagger-ui.always-include=true

# CORS Configuration for local testing
quarkus.http.cors=true
quarkus.http.cors.origins=*
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with

# CloudEvents Configuration
cloudevents.source=/genetic-simulator/vep-service-local
cloudevents.type.prefix=com.healthcare.genetic

# ADR-001 Testing Notes:
# - This service ONLY handles VEP processing
# - Consumes raw genetic data from Kafka
# - Calls Ensembl VEP API for annotation
# - Publishes annotated results to Kafka
# - NO WebSocket handling (moved to websocket-service)
# - Runs on port 8081 to avoid conflicts
