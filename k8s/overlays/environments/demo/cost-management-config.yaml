apiVersion: v1
kind: ConfigMap
metadata:
  name: cost-management-config
  namespace: healthcare-ml-demo
  annotations:
    description: "Cost management configuration for healthcare ML demo environment"
    insights.openshift.io/cost-center: "genomics-research-demo"
    insights.openshift.io/billing-model: "chargeback"
data:
  cost-attribution-strategy.yaml: |
    # Healthcare ML Cost Attribution Strategy
    # Demo Environment Configuration
    
    ## Cost Centers
    primary_cost_center: genomics-research-demo
    secondary_cost_centers:
      - development
      - testing
      - demo
    
    ## Billing Models
    billing_model: chargeback
    billing_frequency: monthly
    currency: USD
    
    ## Workload Cost Categories
    workload_categories:
      standard:
        description: "Normal and big-data genetic analysis"
        cost_multiplier: 1.0
        resource_profile: balanced
        expected_utilization: 70%
      
      compute_intensive:
        description: "Node-scale processing and ML training"
        cost_multiplier: 1.5
        resource_profile: high-memory
        expected_utilization: 85%
    
    ## Resource Cost Allocation
    resource_allocation:
      cpu:
        unit: core-hours
        rate_per_hour: 0.05
        peak_multiplier: 1.2
      
      memory:
        unit: gb-hours
        rate_per_hour: 0.01
        peak_multiplier: 1.1
      
      storage:
        unit: gb-months
        rate_per_month: 0.10
        type: premium-ssd
      
      network:
        unit: gb-transferred
        rate_per_gb: 0.02
        ingress_free: true

  labels-and-annotations.yaml: |
    # Standard labels for all healthcare ML resources
    standard_labels:
      app.kubernetes.io/name: healthcare-ml-genetic-predictor
      app.kubernetes.io/component: genetic-analysis
      app.kubernetes.io/part-of: healthcare-ml-ecosystem
      app.kubernetes.io/managed-by: kustomize
      app.kubernetes.io/version: "1.0.0"
    
    # Cost management labels
    cost_labels:
      insights.openshift.io/cost-center: genomics-research-demo
      insights.openshift.io/billing-model: chargeback
      insights.openshift.io/environment: demo
      insights.openshift.io/project: healthcare-ml-demo
    
    # Workload-specific labels
    workload_labels:
      workload.healthcare-ml/type: genetic-analysis
      workload.healthcare-ml/mode: normal|bigdata|nodescale
      workload.healthcare-ml/service: vep-annotation|websocket|kafka
      workload.healthcare-ml/priority: standard|high|critical

  dashboard-config.json: |
    {
      "dashboard": {
        "title": "Healthcare ML Cost Management - Demo Environment",
        "description": "Cost attribution and resource utilization for genetic analysis workloads",
        "refresh_interval": "5m",
        "time_range": "24h"
      },
      "panels": [
        {
          "title": "Cost by Workload Type",
          "type": "pie_chart",
          "query": "sum by (workload_type) (cost_per_hour{environment='demo'})",
          "colors": ["#1f77b4", "#ff7f0e", "#2ca02c"]
        },
        {
          "title": "Resource Utilization by Node Pool",
          "type": "time_series",
          "queries": [
            "avg by (workload_type) (cpu_utilization{environment='demo'})",
            "avg by (workload_type) (memory_utilization{environment='demo'})"
          ]
        },
        {
          "title": "Node Scaling Events",
          "type": "table",
          "query": "increase(node_scaling_events{environment='demo'}[1h])",
          "columns": ["timestamp", "workload_type", "action", "node_count"]
        },
        {
          "title": "Cost per Genetic Analysis",
          "type": "gauge",
          "query": "avg(cost_per_analysis{environment='demo'})",
          "thresholds": [0.10, 0.25, 0.50]
        }
      ]
    }

---
apiVersion: v1
kind: Secret
metadata:
  name: cost-management-credentials
  namespace: healthcare-ml-demo
  annotations:
    description: "Credentials for cost management integration"
type: Opaque
stringData:
  # Red Hat Insights Cost Management API
  insights_api_key: "REPLACE_WITH_ACTUAL_API_KEY"
  insights_org_id: "REPLACE_WITH_ORG_ID"
  
  # Azure Cost Management API (if using Azure billing integration)
  azure_subscription_id: "REPLACE_WITH_SUBSCRIPTION_ID"
  azure_tenant_id: "REPLACE_WITH_TENANT_ID"
  azure_client_id: "REPLACE_WITH_CLIENT_ID"
  azure_client_secret: "REPLACE_WITH_CLIENT_SECRET"

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cost-attribution-report
  namespace: healthcare-ml-demo
  annotations:
    description: "Generate daily cost attribution reports for healthcare ML workloads"
spec:
  schedule: "0 6 * * *"  # Daily at 6 AM UTC
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: cost-reporter
            image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
            command:
            - /bin/bash
            - -c
            - |
              echo "üí∞ Healthcare ML Cost Attribution Report - $(date)"
              echo "=================================================="
              echo ""

              # Check Cost Management Metrics Operator Status
              echo "üîç Cost Management Metrics Operator Status:"
              echo "==========================================="
              COST_CONFIG_STATUS=$(oc get costmanagementmetricsconfig healthcare-ml-demo-cost-config -n costmanagement-metrics-operator --no-headers 2>/dev/null | awk '{print $2}' || echo "Not Found")
              if [ "$COST_CONFIG_STATUS" != "Not Found" ]; then
                echo "  ‚úÖ Cost Management Config: Active ($COST_CONFIG_STATUS)"
                echo "  üìä Data Collection: $(oc get costmanagementmetricsconfig healthcare-ml-demo-cost-config -n costmanagement-metrics-operator -o jsonpath='{.spec.upload.upload_toggle}' 2>/dev/null || echo 'Unknown')"
                echo "  üîÑ Upload Cycle: $(oc get costmanagementmetricsconfig healthcare-ml-demo-cost-config -n costmanagement-metrics-operator -o jsonpath='{.spec.upload.upload_cycle}' 2>/dev/null || echo 'Unknown') minutes"
                echo "  üåê Red Hat Integration: Enabled"
              else
                echo "  ‚ùå Cost Management Metrics Operator not configured"
                echo "  ‚ö†Ô∏è  Run: ./scripts/setup-redhat-cost-management-official.sh"
              fi
              echo ""

              # Check for Cost Management Operator Pods and Logs
              echo "üìà Cost Management Data Collection Status:"
              echo "========================================"
              COST_PODS=$(oc get pods -n costmanagement-metrics-operator --no-headers 2>/dev/null | wc -l || echo "0")
              if [ "$COST_PODS" -gt 0 ]; then
                echo "  ‚úÖ Cost Management Pods: $COST_PODS running"
                oc get pods -n costmanagement-metrics-operator -o custom-columns="NAME:.metadata.name,STATUS:.status.phase,AGE:.metadata.creationTimestamp" --no-headers 2>/dev/null || echo "  Unable to get pod details"
                echo ""
                echo "  üìä Recent Cost Data Collection Activity:"
                oc logs -n costmanagement-metrics-operator -l app=cost-mgmt-operator --tail=5 --since=1h 2>/dev/null | grep -E "(upload|collect|report)" | tail -3 || echo "  No recent cost collection activity found"
              else
                echo "  ‚ùå No Cost Management operator pods found"
              fi
              echo ""

              # Get actual resource usage and costs from Cost Management data
              echo "üí∞ Resource Usage by Workload Type (Cost Management Data):"
              echo "========================================================"
              echo "üñ•Ô∏è  Compute-Intensive Workloads:"
              oc get pods -l workload-type=compute-intensive -o custom-columns="NAME:.metadata.name,CPU-REQUEST:.spec.containers[0].resources.requests.cpu,MEMORY-REQUEST:.spec.containers[0].resources.requests.memory,NODE:.spec.nodeName,COST-CENTER:.metadata.labels.cost-center" --no-headers 2>/dev/null || echo "No compute-intensive pods found"
              echo ""
              echo "üìä All Healthcare ML Workloads:"
              oc get pods -n healthcare-ml-demo -o custom-columns="NAME:.metadata.name,CPU-REQUEST:.spec.containers[0].resources.requests.cpu,MEMORY-REQUEST:.spec.containers[0].resources.requests.memory,STATUS:.status.phase,COST-CENTER:.metadata.labels.cost-center" --no-headers 2>/dev/null || echo "No pods found in healthcare-ml-demo namespace"
              echo ""

              # Cost Management Metrics Integration
              echo "üìä Cost Management Metrics (Red Hat Insights Data):"
              echo "================================================="
              # Check if we can access cost management metrics via the operator
              COST_DATA_PVC=$(oc get pvc -n costmanagement-metrics-operator healthcare-ml-cost-data --no-headers 2>/dev/null | awk '{print $2}' || echo "Not Found")
              if [ "$COST_DATA_PVC" != "Not Found" ]; then
                echo "  ‚úÖ Cost Data Storage: $COST_DATA_PVC"
                echo "  üìÅ Storage Size: $(oc get pvc healthcare-ml-cost-data -n costmanagement-metrics-operator -o jsonpath='{.spec.resources.requests.storage}' 2>/dev/null || echo 'Unknown')"
                echo "  üîÑ Last Upload Status: $(oc describe costmanagementmetricsconfig healthcare-ml-demo-cost-config -n costmanagement-metrics-operator 2>/dev/null | grep -A 2 "Upload" | tail -1 || echo 'Status unavailable')"
              else
                echo "  ‚ùå Cost data storage not found"
              fi
              echo ""

              # Node scaling events with cost impact
              echo "‚ö° Node Scaling Events (Cost Impact Analysis):"
              echo "============================================"
              echo "üîÑ Recent Scaling Events:"
              oc get events --field-selector reason=ScalingReplicaSet --sort-by='.lastTimestamp' --no-headers 2>/dev/null | tail -10 || echo "No scaling events found"
              echo ""
              echo "üèóÔ∏è  Machine Autoscaler Events (Node Cost Changes):"
              oc get events --field-selector reason=MachineCreated --sort-by='.lastTimestamp' --no-headers 2>/dev/null | tail -5 || echo "No machine creation events found"
              echo ""

              # Enhanced cost attribution with Red Hat Insights labels
              echo "üè∑Ô∏è  Cost Attribution Summary (Red Hat Insights Integration):"
              echo "=========================================================="
              echo "üí∞ Node Cost Attribution:"
              oc get nodes -o custom-columns="NAME:.metadata.name,WORKLOAD-TYPE:.metadata.labels.workload-type,COST-CENTER:.metadata.labels.cost-center,INSTANCE-TYPE:.metadata.labels.node\.kubernetes\.io/instance-type,BILLING-MODEL:.metadata.labels.billing-model" --no-headers 2>/dev/null | grep -v "<none>" || echo "No cost-attributed nodes found"
              echo ""
              echo "üìà Cost Center Breakdown (Red Hat Cost Management):"
              echo "  üìã genomics-research: Standard workload nodes (normal/bigdata VEP processing)"
              echo "  ‚ö° genomics-research-demo: Compute-intensive nodes (node scaling demo)"
              echo "  üåê Red Hat Dashboard: https://console.redhat.com/openshift/cost-management"
              echo "  üîç Filter by cluster: healthcare-ml-demo-cluster"
              echo "  üìä Project filter: healthcare-ml-demo"
              echo ""

              # Red Hat Cost Management Dashboard Links
              echo "üåê Red Hat Cost Management Dashboard Access:"
              echo "=========================================="
              CLUSTER_ID=$(oc get clusterversion version -o jsonpath='{.spec.clusterID}' 2>/dev/null || echo "Unknown")
              echo "  üÜî Cluster ID: $CLUSTER_ID"
              echo "  üåê Dashboard URL: https://console.redhat.com/openshift/cost-management"
              echo "  üìä Direct Link: https://console.redhat.com/openshift/cost-management/openshift?cluster=$CLUSTER_ID"
              echo "  üè∑Ô∏è  Cost Center Filter: genomics-research, genomics-research-demo"
              echo "  üìÅ Project Filter: healthcare-ml-demo"
              echo ""

              echo "‚úÖ Cost attribution report completed successfully"
              echo "üìä For detailed cost analysis, visit the Red Hat Cost Management dashboard"
              echo "‚è±Ô∏è  Cost data is updated hourly and available within 1-2 hours of resource usage"
          restartPolicy: OnFailure
          serviceAccountName: cost-reporter

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cost-reporter
  namespace: healthcare-ml-demo

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cost-reporter
rules:
- apiGroups: [""]
  resources: ["pods", "nodes", "events", "persistentvolumeclaims"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list"]
- apiGroups: ["machine.openshift.io"]
  resources: ["machines", "machinesets"]
  verbs: ["get", "list"]
- apiGroups: ["costmanagement-metrics-cfg.openshift.io"]
  resources: ["costmanagementmetricsconfigs"]
  verbs: ["get", "list", "describe"]
- apiGroups: ["config.openshift.io"]
  resources: ["clusterversions"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cost-reporter
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cost-reporter
subjects:
- kind: ServiceAccount
  name: cost-reporter
  namespace: healthcare-ml-demo
