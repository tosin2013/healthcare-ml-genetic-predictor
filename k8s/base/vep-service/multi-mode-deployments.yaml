---
# Multi-Mode VEP Service Deployments
# Each deployment is optimized for different scaling patterns and resource requirements

# Normal Mode VEP Service (Pod Scaling Only)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vep-service-normal
  labels:
    app: vep-service
    mode: normal
    component: vep-annotation
spec:
  replicas: 0
  selector:
    matchLabels:
      app: vep-service
      mode: normal
  template:
    metadata:
      labels:
        app: vep-service
        mode: normal
        component: vep-annotation
    spec:
      containers:
      - name: vep-service
        image: image-registry.openshift-image-registry.svc:5000/healthcare-ml-demo/vep-service:latest
        ports:
        - containerPort: 8080
        env:
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "genetic-data-cluster-kafka-bootstrap.healthcare-ml-demo.svc.cluster.local:9092"
        - name: VEP_MODE
          value: "normal"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Big Data Mode VEP Service (Memory-Intensive Pod Scaling)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vep-service-bigdata
  labels:
    app: vep-service
    mode: bigdata
    component: vep-annotation
spec:
  replicas: 0
  selector:
    matchLabels:
      app: vep-service
      mode: bigdata
  template:
    metadata:
      labels:
        app: vep-service
        mode: bigdata
        component: vep-annotation
    spec:
      containers:
      - name: vep-service
        image: image-registry.openshift-image-registry.svc:5000/healthcare-ml-demo/vep-service:latest
        ports:
        - containerPort: 8080
        env:
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "genetic-data-cluster-kafka-bootstrap.healthcare-ml-demo.svc.cluster.local:9092"
        - name: VEP_MODE
          value: "bigdata"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

# Note: vep-service-nodescale deployment already exists in cluster
# Skipping to avoid selector conflicts

---
# Kafka Lag Mode VEP Service (KEDA Consumer Lag Demonstration)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vep-service-kafka-lag
  labels:
    app: vep-service
    mode: kafka-lag
    component: vep-annotation
    github-issue: "21"
  annotations:
    description: "VEP service for Kafka consumer lag demonstration with KEDA scaling"
    github-issue: "21"
spec:
  replicas: 0
  selector:
    matchLabels:
      app: vep-service
      mode: kafka-lag
  template:
    metadata:
      labels:
        app: vep-service
        mode: kafka-lag
        component: vep-annotation
        scaling-type: consumer-lag
    spec:
      containers:
      - name: vep-service
        image: image-registry.openshift-image-registry.svc:5000/healthcare-ml-demo/vep-service:latest
        ports:
        - containerPort: 8080
        env:
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "genetic-data-cluster-kafka-bootstrap.healthcare-ml-demo.svc.cluster.local:9092"
        - name: VEP_MODE
          value: "kafka-lag"
        - name: KAFKA_CONSUMER_GROUP
          value: "genetic-lag-consumer-group"
        - name: KAFKA_TOPIC
          value: "genetic-lag-demo-raw"
        - name: PROCESSING_DELAY_MS
          value: "5000"  # 5 second delay to create controlled lag
        - name: LAG_SIMULATION_ENABLED
          value: "true"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      # Prefer scheduling on different nodes for lag distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - vep-service
              topologyKey: kubernetes.io/hostname
