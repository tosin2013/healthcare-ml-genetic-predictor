apiVersion: apps/v1
kind: Deployment
metadata:
  name: vep-service-nodescale
  labels:
    app: vep-service-nodescale
    component: vep-processor
    scaling-mode: nodescale
    app.kubernetes.io/name: vep-annotation-service
    app.kubernetes.io/component: genetic-processor
    app.kubernetes.io/part-of: healthcare-ml-genetic-predictor
    app.kubernetes.io/version: "1.0.0"
  annotations:
    description: "High-resource VEP service designed to trigger node scaling"
    insights.openshift.io/billing-model: chargeback
    insights.openshift.io/cost-center: genomics-research
    insights.openshift.io/project: vep-nodescale-v1
spec:
  replicas: 0  # Start at 0, resource pressure HPA will scale up
  selector:
    matchLabels:
      app: vep-service-nodescale
  template:
    metadata:
      labels:
        app: vep-service-nodescale
        component: vep-processor
        scaling-mode: nodescale
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/q/metrics"
    spec:
      containers:
      - name: vep-service
        image: image-registry.openshift-image-registry.svc:5000/healthcare-ml-demo/vep-service:latest
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        # Node Scale Mode: Process messages from genetic-nodescale-raw topic
        # Scaling triggered by CPU/memory pressure, NOT Kafka lag
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "genetic-data-cluster-kafka-bootstrap.healthcare-ml-demo.svc.cluster.local:9092"
        - name: QUARKUS_PROFILE
          value: "prod"
        - name: SCALING_MODE
          value: "nodescale"
        - name: JAVA_OPTS
          value: "-Xmx2g -Xms2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
        # VEP service connects to all topics but only processes messages sent to genetic-nodescale-raw
        # The WebSocket service routes messages to the correct topic based on scaling mode
        # No need to disable other connectors - they will simply remain idle

        # COST-OPTIMIZED resource requests for cluster autoscaler demo
        # Reduced from 16Gi/7000m to fit D4s_v3 instances (4 vCPU, 16GB RAM)
        # Still high enough to trigger autoscaler when multiple pods are needed
        resources:
          requests:
            memory: "6Gi"      # 6GB memory request per pod - fits within D4s_v3
            cpu: "2000m"       # 2 CPU cores - allows 1-2 pods per node
          limits:
            memory: "8Gi"      # 8GB memory limit per pod
            cpu: "3000m"       # 3 CPU cores per pod
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Startup probe for slower initialization
        startupProbe:
          httpGet:
            path: /q/health/started
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      
      # Node affinity optimized for cluster autoscaler demo
      affinity:
        nodeAffinity:
          # Prefer compute-intensive nodes but allow standard nodes for cluster autoscaler demo
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: workload-type
                operator: In
                values: ["compute-intensive"]
          - weight: 80
            preference:
              matchExpressions:
              - key: resource-profile
                operator: In
                values: ["high-memory"]
          - weight: 60
            preference:
              matchExpressions:
              - key: workload-type
                operator: In
                values: ["standard"]
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - vep-service-nodescale
              topologyKey: kubernetes.io/hostname
      
      # Tolerations for node scaling
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

# KEDA ScaledObject REMOVED for Node Scale Mode
#
# Architectural Separation: Node Scale Mode vs Kafka Lag Mode
# =========================================================
#
# Node Scale Mode (this service):
# - Processes messages from genetic-nodescale-raw topic
# - Scaling triggered by CPU/Memory pressure from processing large messages
# - Uses resource-pressure based HPA (CPU/Memory metrics)
# - High resource requirements force cluster autoscaler to provision new nodes
# - Demonstrates cluster-level scaling (node provisioning)
#
# Kafka Lag Mode (separate service):
# - Processes messages from genetic-lag-demo-raw topic
# - Scaling triggered by Kafka consumer lag (KEDA)
# - Demonstrates pod-level scaling based on message queue backlog
#
# This separation eliminates confusion and provides clear demonstrations:
# - Node Scale Mode: "Resource pressure → Cluster autoscaler → New nodes"
# - Kafka Lag Mode: "Consumer lag → KEDA HPA → More pods"
#
# Future consideration: Multi-dimensional Pod Autoscaler (AEP-5342) when available
# from Red Hat for advanced autoscaling coordination capabilities.

---
apiVersion: v1
kind: Service
metadata:
  name: vep-service-nodescale
  labels:
    app: vep-service-nodescale
    component: vep-processor
    scaling-mode: nodescale
  annotations:
    description: "Service for high-resource VEP node scaling demo"
spec:
  selector:
    app: vep-service-nodescale
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP
