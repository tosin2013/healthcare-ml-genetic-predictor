---
# Kafka Lag Mode VEP Service Deployment
# SEPARATION OF CONCERNS: Dedicated to KAFKA LAG scaling mode only
# - UI Button: #kafkaLagModeBtn â†’ setKafkaLagMode()
# - Kafka Topic: genetic-lag-demo-raw (exclusive)
# - KEDA ScaledObject: kafka-lag-scaler
# - Consumer Group: vep-kafka-lag-service-group (isolated)
# - Purpose: Consumer lag demonstration with controlled processing delays
# - Future: Red Hat autoscaling coordination experiments (docs/research/red-hat-autoscaling-coordination-projects.md)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vep-service-kafka-lag
  labels:
    app: vep-service
    mode: kafka-lag
    component: vep-annotation
    scaling-mode: kafka-lag
    scaling-type: consumer-lag
    app.kubernetes.io/name: vep-annotation-service
    app.kubernetes.io/component: genetic-processor
    app.kubernetes.io/part-of: healthcare-ml-genetic-predictor
    app.kubernetes.io/version: "1.0.0"
    separation-of-concerns: "enforced"
    github-issue: "21"
  annotations:
    description: "Kafka lag mode VEP service for consumer lag demonstration with KEDA scaling"
    separation-mode: "kafka-lag"
    separation-rationale: "Dedicated to demonstrating lag-based scaling with controlled delays"
    insights.openshift.io/billing-model: "chargeback"
    insights.openshift.io/cost-center: "genomics-research"
    insights.openshift.io/project: "kafka-lag-demo"
    github-issue: "21"
    future-experiments: "Red Hat autoscaling coordination projects"
spec:
  replicas: 0  # Start at 0, KEDA will scale up when lag accumulates
  selector:
    matchLabels:
      app: vep-service
      mode: kafka-lag
  template:
    metadata:
      labels:
        app: vep-service
        mode: kafka-lag
        component: vep-annotation
        scaling-mode: kafka-lag
        scaling-type: consumer-lag
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/q/metrics"
    spec:
      containers:
      - name: vep-service
        image: image-registry.openshift-image-registry.svc:5000/healthcare-ml-demo/vep-service:latest
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "genetic-data-cluster-kafka-bootstrap.healthcare-ml-demo.svc.cluster.local:9092"
        - name: VEP_MODE
          value: "kafka-lag"
        - name: QUARKUS_PROFILE
          value: "prod"
        - name: SCALING_MODE
          value: "kafka-lag"
        # Kafka lag specific configuration
        - name: KAFKA_CONSUMER_GROUP
          value: "vep-kafka-lag-service-group"
        - name: KAFKA_TOPIC
          value: "genetic-lag-demo-raw"
        - name: PROCESSING_DELAY_MS
          value: "5000"  # 5 second delay to create controlled lag for demonstration
        - name: LAG_SIMULATION_ENABLED
          value: "true"
        # Moderate resource allocation for lag demonstration
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /q/health/ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 30
      # Prefer scheduling on different nodes for lag distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - vep-service
              topologyKey: kubernetes.io/hostname

---
# Service for Kafka Lag Mode VEP
apiVersion: v1
kind: Service
metadata:
  name: vep-service-kafka-lag
  labels:
    app: vep-service
    mode: kafka-lag
    component: vep-annotation
    scaling-mode: kafka-lag
  annotations:
    description: "Service for Kafka lag mode VEP processing"
    separation-mode: "kafka-lag"
spec:
  selector:
    app: vep-service
    mode: kafka-lag
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP
