apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: vep-service-nodescale-hpa
  namespace: healthcare-ml-demo
  labels:
    app: vep-service-nodescale
    component: vep-processor
    scaling-mode: nodescale
    scaling-type: resource-pressure
  annotations:
    description: "Resource pressure HPA for Node Scale Mode - triggers cluster autoscaler"
    insights.openshift.io/cost-center: "genomics-research"
    insights.openshift.io/project: "node-scaling-demo"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: vep-service-nodescale
  
  # Aggressive scaling configuration to force node provisioning
  minReplicas: 1    # Minimum 1 replica (HPA requirement)
  maxReplicas: 50   # High max to force cluster autoscaler (50 * 8 CPU = 400 cores)
  
  # Resource-based scaling metrics
  metrics:
  # Primary trigger: CPU utilization
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50  # Scale when CPU > 50%
  
  # Secondary trigger: Memory utilization  
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70  # Scale when memory > 70%
  
  # Aggressive scaling behavior to force rapid node provisioning
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # 5 minutes stabilization before scale down
      policies:
      - type: Percent
        value: 25              # Scale down by 25% at a time
        periodSeconds: 60      # Every minute
      - type: Pods
        value: 5               # Or scale down by 5 pods at a time
        periodSeconds: 60
      selectPolicy: Min        # Use the more conservative policy
    
    scaleUp:
      stabilizationWindowSeconds: 0     # Immediate scale up
      policies:
      - type: Percent
        value: 1000            # Scale up by 1000% (10x) immediately
        periodSeconds: 15      # Every 15 seconds
      - type: Pods
        value: 10              # Or add 10 pods at once (10 * 8 CPU = 80 cores)
        periodSeconds: 15      # Every 15 seconds
      selectPolicy: Max        # Use the most aggressive policy

---
# ServiceMonitor for Prometheus metrics (optional)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: vep-service-nodescale-metrics
  namespace: healthcare-ml-demo
  labels:
    app: vep-service-nodescale
    component: monitoring
spec:
  selector:
    matchLabels:
      app: vep-service-nodescale
  endpoints:
  - port: http
    path: /q/metrics
    interval: 30s
    scrapeTimeout: 10s
