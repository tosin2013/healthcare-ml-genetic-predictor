apiVersion: apps/v1
kind: Deployment
metadata:
  name: quarkus-websocket-service
  namespace: healthcare-ml-demo
  labels:
    app.kubernetes.io/name: quarkus-websocket-service
    app.kubernetes.io/part-of: healthcare-ml-demo
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/component: websocket-service
    app.kubernetes.io/version: "1.0.0"
    cost-center: "genomics-research"
    project: "risk-predictor-v1"
  annotations:
    cost-center: "genomics-research"
    project: "risk-predictor-v1"
    deployment-method: "kustomize"
    app.openshift.io/connects-to: "genetic-data-cluster"
spec:
  # CRITICAL: WebSocket service MUST have exactly 1 replica
  # Multiple replicas cause:
  # - Session loss during scaling events
  # - Connection routing issues (sessions tied to specific pods)
  # - Inconsistent state management across pods
  # - Poor user experience with dropped connections
  # DO NOT enable autoscaling for this service!
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: quarkus-websocket-service
      app.kubernetes.io/part-of: healthcare-ml-demo
  template:
    metadata:
      labels:
        app.kubernetes.io/name: quarkus-websocket-service
        app.kubernetes.io/part-of: healthcare-ml-demo
        app.kubernetes.io/component: websocket-service
        cost-center: "genomics-research"
        project: "risk-predictor-v1"
      annotations:
        cost-center: "genomics-research"
        project: "risk-predictor-v1"
    spec:
      containers:
      - name: quarkus-websocket-service
        image: "image-registry.openshift-image-registry.svc:5000/healthcare-ml-demo/quarkus-websocket-service:latest"
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: quarkus-websocket-config
              key: kafka.bootstrap.servers
        - name: QUARKUS_HTTP_HOST
          valueFrom:
            configMapKeyRef:
              name: quarkus-websocket-config
              key: quarkus.http.host
        - name: QUARKUS_HTTP_PORT
          valueFrom:
            configMapKeyRef:
              name: quarkus-websocket-config
              key: quarkus.http.port
        - name: JAVA_OPTS_APPEND
          value: "-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
        envFrom:
        - configMapRef:
            name: quarkus-websocket-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault

      # Node affinity for standard workload pool
      affinity:
        nodeAffinity:
          # Require standard workload nodes
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: workload-type
                operator: In
                values: ["standard"]
          # Prefer balanced resource profile
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: resource-profile
                operator: In
                values: ["balanced"]
          - weight: 80
            preference:
              matchExpressions:
              - key: workload.healthcare-ml/mode
                operator: In
                values: ["normal-bigdata"]

        # Pod anti-affinity for high availability
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - quarkus-websocket-service
              topologyKey: kubernetes.io/hostname
