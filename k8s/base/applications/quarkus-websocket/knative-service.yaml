apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: quarkus-websocket-knative
  namespace: healthcare-ml-demo
  labels:
    app.kubernetes.io/name: quarkus-websocket-service
    app.kubernetes.io/part-of: healthcare-ml-genetic-predictor
    app.kubernetes.io/component: websocket-service
    app.kubernetes.io/version: "1.0.0"
  annotations:
    # Cost management annotations for Red Hat Insights
    insights.openshift.io/cost-center: "genomics-research"
    insights.openshift.io/project: "risk-predictor-v1"
    insights.openshift.io/billing-model: "chargeback"
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: quarkus-websocket-service
        app.kubernetes.io/part-of: healthcare-ml-genetic-predictor
        app.kubernetes.io/component: websocket-service
        app.kubernetes.io/version: "1.0.0"
      annotations:
        # Cost management annotations
        insights.openshift.io/cost-center: "genomics-research"
        insights.openshift.io/project: "risk-predictor-v1"
        insights.openshift.io/billing-model: "chargeback"
        # Knative autoscaling configuration
        autoscaling.knative.dev/class: "kpa.autoscaling.knative.dev"
        autoscaling.knative.dev/metric: "concurrency"
        autoscaling.knative.dev/minScale: "0"
        autoscaling.knative.dev/maxScale: "10"
        autoscaling.knative.dev/target: "10"
        autoscaling.knative.dev/targetUtilizationPercentage: "70"
        # Scale-to-zero configuration
        autoscaling.knative.dev/scaleToZeroGracePeriod: "30s"
        autoscaling.knative.dev/scaleDownDelay: "0s"
        autoscaling.knative.dev/stableWindow: "60s"
    spec:
      # Scale-to-zero timeout
      timeoutSeconds: 300
      # Container specification
      containers:
      - name: quarkus-websocket-service
        image: image-registry.openshift-image-registry.svc:5000/healthcare-ml-demo/quarkus-websocket-service:latest
        ports:
        - name: http1
          containerPort: 8080
          protocol: TCP
        env:
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: quarkus-websocket-config
              key: kafka.bootstrap.servers
        - name: QUARKUS_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: quarkus-websocket-config
              key: quarkus.log.level
        - name: QUARKUS_HTTP_PORT
          value: "8080"
        - name: QUARKUS_HTTP_HOST
          value: "0.0.0.0"
        # Resource configuration optimized for scale-to-zero
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        # Health checks for Knative
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        # Security context for HIPAA compliance
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        # Volume mounts for configuration
        volumeMounts:
        - name: config-volume
          mountPath: /deployments/config
          readOnly: true
      # Volumes
      volumes:
      - name: config-volume
        configMap:
          name: quarkus-websocket-config
      # Service account for proper RBAC
      serviceAccountName: quarkus-websocket-service
---
# ServiceAccount for RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: quarkus-websocket-service
  namespace: healthcare-ml-demo
  labels:
    app.kubernetes.io/name: quarkus-websocket-service
    app.kubernetes.io/part-of: healthcare-ml-genetic-predictor
  annotations:
    insights.openshift.io/cost-center: "genomics-research"
    insights.openshift.io/project: "risk-predictor-v1"
---
# Role for accessing ConfigMaps and Secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: quarkus-websocket-service
  namespace: healthcare-ml-demo
  labels:
    app.kubernetes.io/name: quarkus-websocket-service
    app.kubernetes.io/part-of: healthcare-ml-genetic-predictor
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: quarkus-websocket-service
  namespace: healthcare-ml-demo
  labels:
    app.kubernetes.io/name: quarkus-websocket-service
    app.kubernetes.io/part-of: healthcare-ml-genetic-predictor
subjects:
- kind: ServiceAccount
  name: quarkus-websocket-service
  namespace: healthcare-ml-demo
roleRef:
  kind: Role
  name: quarkus-websocket-service
  apiGroup: rbac.authorization.k8s.io
