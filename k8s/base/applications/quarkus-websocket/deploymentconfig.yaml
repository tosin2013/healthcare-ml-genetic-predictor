apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: quarkus-websocket-service-dc
  namespace: healthcare-ml-demo
  labels:
    app.kubernetes.io/name: quarkus-websocket-service
    app.kubernetes.io/part-of: healthcare-ml-demo
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/component: websocket-service
    cost-center: "genomics-research"
    project: "risk-predictor-v1"
  annotations:
    cost-center: "genomics-research"
    project: "risk-predictor-v1"
    deployment-method: "kustomize"
    app.openshift.io/connects-to: "genetic-data-cluster"
spec:
  replicas: 1
  selector:
    app.kubernetes.io/name: quarkus-websocket-service
    app.kubernetes.io/part-of: healthcare-ml-demo
    deploymentconfig: quarkus-websocket-service-dc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: quarkus-websocket-service
        app.kubernetes.io/part-of: healthcare-ml-demo
        app.kubernetes.io/component: websocket-service
        deploymentconfig: quarkus-websocket-service-dc
        cost-center: "genomics-research"
        project: "risk-predictor-v1"
      annotations:
        cost-center: "genomics-research"
        project: "risk-predictor-v1"
    spec:
      containers:
      - name: quarkus-websocket-service
        image: "quarkus-websocket-service:latest"
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: quarkus-websocket-config
              key: kafka.bootstrap.servers
        - name: QUARKUS_HTTP_HOST
          valueFrom:
            configMapKeyRef:
              name: quarkus-websocket-config
              key: quarkus.http.host
        - name: QUARKUS_HTTP_PORT
          valueFrom:
            configMapKeyRef:
              name: quarkus-websocket-config
              key: quarkus.http.port
        - name: JAVA_OPTS_APPEND
          value: "-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
        envFrom:
        - configMapRef:
            name: quarkus-websocket-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 185
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
  triggers:
  - type: ConfigChange
  - type: ImageChange
    imageChangeParams:
      automatic: true
      containerNames:
      - quarkus-websocket-service
      from:
        kind: ImageStreamTag
        name: "quarkus-websocket-service:latest"
        namespace: healthcare-ml-demo
  strategy:
    type: Rolling
    rollingParams:
      updatePeriodSeconds: 1
      intervalSeconds: 1
      timeoutSeconds: 600
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 3
