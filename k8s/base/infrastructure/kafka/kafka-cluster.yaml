apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: genetic-data-cluster
  namespace: healthcare-ml-demo
  labels:
    app.kubernetes.io/name: genetic-data-cluster
    app.kubernetes.io/part-of: healthcare-ml-demo
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/component: kafka-cluster
    cost-center: "genomics-research"
    project: "risk-predictor-v1"
  annotations:
    cost-center: "genomics-research"
    project: "risk-predictor-v1"
    deployment-method: "kustomize"
    kafka.version: "3.8.0"
spec:
  kafka:
    version: 3.8.0
    replicas: 3
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
        configuration:
          # Enable client authentication for secure connections
          clientAuth: none
    config:
      # Kafka broker configuration optimized for healthcare ML workloads
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      default.replication.factor: 3
      min.insync.replicas: 2
      # Log retention for genetic data processing
      log.retention.hours: 168  # 7 days
      log.retention.bytes: 1073741824  # 1GB
      log.segment.bytes: 1073741824  # 1GB
      # Performance tuning for ML workloads
      num.network.threads: 3
      num.io.threads: 8
      socket.send.buffer.bytes: 102400
      socket.receive.buffer.bytes: 102400
      socket.request.max.bytes: 104857600
      # Compression for genetic data
      compression.type: "snappy"
    storage:
      type: ephemeral
      # Note: For production, use persistent storage:
      # type: persistent-claim
      # size: 100Gi
      # class: gp2
    resources:
      requests:
        memory: 1Gi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 1000m
    # JVM configuration for healthcare ML workloads
    jvmOptions:
      -Xms: "512m"
      -Xmx: "1g"
    # Metrics configuration for monitoring
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: kafka-metrics-config.yml
  zookeeper:
    replicas: 3
    storage:
      type: ephemeral
      # Note: For production, use persistent storage:
      # type: persistent-claim
      # size: 10Gi
      # class: gp2
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 500m
    # JVM configuration for ZooKeeper
    jvmOptions:
      -Xms: "256m"
      -Xmx: "512m"
    # Metrics configuration
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: zookeeper-metrics-config.yml
  entityOperator:
    topicOperator:
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          memory: 512Mi
          cpu: 200m
    userOperator:
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          memory: 512Mi
          cpu: 200m
  # Kafka Exporter for additional metrics
  kafkaExporter:
    topicRegex: ".*"
    groupRegex: ".*"
    resources:
      requests:
        memory: 64Mi
        cpu: 50m
      limits:
        memory: 128Mi
        cpu: 100m
