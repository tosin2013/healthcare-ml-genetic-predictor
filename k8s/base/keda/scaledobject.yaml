apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: vep-service-scaler
  labels:
    app: vep-service
    component: vep-processor
  annotations:
    description: "Multi-topic KEDA scaler for VEP service supporting normal, big-data, and node-scale modes"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: vep-service
  pollingInterval: 5   # More aggressive polling for multi-mode
  cooldownPeriod: 30   # Faster cooldown for responsive scaling
  idleReplicaCount: 0  # Scale to zero when no processing
  minReplicaCount: 0
  maxReplicaCount: 50  # Higher max to support node scaling
  fallback:
    failureThreshold: 3
    replicas: 1
  advanced:
    restoreToOriginalReplicaCount: false
    horizontalPodAutoscalerConfig:
      name: vep-service-multi-hpa
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 60
          policies:
          - type: Percent
            value: 50
            periodSeconds: 30
        scaleUp:
          stabilizationWindowSeconds: 5
          policies:
          - type: Percent
            value: 200
            periodSeconds: 5
          - type: Pods
            value: 10
            periodSeconds: 5
          selectPolicy: Max
  triggers:
  # Normal Mode: Standard VEP processing
  - type: kafka
    metadata:
      bootstrapServers: genetic-data-cluster-kafka-bootstrap.healthcare-ml-demo.svc.cluster.local:9092
      consumerGroup: vep-service-group
      topic: genetic-data-raw
      lagThreshold: "5"
      offsetResetPolicy: latest
      allowIdleConsumers: 'false'
      scaleToZeroOnInvalidOffset: 'true'

  # Big Data Mode: Memory-intensive processing
  - type: kafka
    metadata:
      bootstrapServers: genetic-data-cluster-kafka-bootstrap.healthcare-ml-demo.svc.cluster.local:9092
      consumerGroup: vep-bigdata-service-group
      topic: genetic-bigdata-raw
      lagThreshold: "2"  # Lower threshold for faster big data scaling
      offsetResetPolicy: latest
      allowIdleConsumers: 'false'
      scaleToZeroOnInvalidOffset: 'true'

  # Note: Node Scale Mode removed - handled by dedicated vep-service-nodescale deployment
  # This prevents both services from scaling simultaneously on genetic-nodescale-raw topic
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: websocket-service-scaler
  labels:
    app: quarkus-websocket-service
    component: websocket
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: quarkus-websocket-service
  pollingInterval: 15
  cooldownPeriod: 120
  minReplicaCount: 1
  maxReplicaCount: 1
  triggers:
  - type: kafka
    metadata:
      bootstrapServers: genetic-data-cluster-kafka-bootstrap.healthcare-ml-demo.svc.cluster.local:9092
      consumerGroup: websocket-results-service-group
      topic: genetic-data-annotated
      lagThreshold: "10"
      offsetResetPolicy: latest
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: kafka-lag-scaler
  labels:
    app: vep-service
    mode: kafka-lag
    component: vep-processor
    github-issue: "21"
  annotations:
    description: "KEDA scaler for Kafka consumer lag demonstration with genetic-lag-demo-raw topic"
    github-issue: "21"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: vep-service-kafka-lag
  pollingInterval: 5   # Aggressive polling for lag demonstration
  cooldownPeriod: 30   # Fast cooldown for responsive demo
  idleReplicaCount: 0  # Scale to zero when no lag
  minReplicaCount: 0
  maxReplicaCount: 10  # Moderate max for lag demonstration
  fallback:
    failureThreshold: 3
    replicas: 1
  advanced:
    restoreToOriginalReplicaCount: false
    horizontalPodAutoscalerConfig:
      name: kafka-lag-demo-hpa
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 30
          policies:
          - type: Percent
            value: 50
            periodSeconds: 15
        scaleUp:
          stabilizationWindowSeconds: 0  # Immediate scale up for lag demo
          policies:
          - type: Percent
            value: 100  # Double pods quickly
            periodSeconds: 5
          - type: Pods
            value: 3    # Add 3 pods at once for lag clearing
            periodSeconds: 5
          selectPolicy: Max
  triggers:
  # Kafka Consumer Lag Trigger for genetic-lag-demo-raw
  - type: kafka
    metadata:
      bootstrapServers: genetic-data-cluster-kafka-bootstrap.healthcare-ml-demo.svc.cluster.local:9092
      consumerGroup: genetic-lag-consumer-group
      topic: genetic-lag-demo-raw
      lagThreshold: "10"  # Scale when lag > 10 messages
      offsetResetPolicy: latest
      allowIdleConsumers: 'false'
      scaleToZeroOnInvalidOffset: 'true'
