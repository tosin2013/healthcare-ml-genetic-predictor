# Local Testing Configuration for WebSocket Service
# ADR-001: WebSocket service handles only WebSocket connections and Kafka messaging

# Application Configuration
quarkus.application.name=genetic-risk-predictor-websocket-local
quarkus.application.version=1.0.0-local

# HTTP Configuration
quarkus.http.host=0.0.0.0
quarkus.http.port=8080

# WebSocket Configuration
quarkus.websockets-next.server.supported-subprotocols=genetics-v1

# Local Kafka Configuration
kafka.bootstrap.servers=localhost:9092

# Kafka Producer Configuration - Raw Genetic Data (ADR-001: WebSocket publishes)
mp.messaging.outgoing.genetic-data-raw-out.connector=smallrye-kafka
mp.messaging.outgoing.genetic-data-raw-out.topic=genetic-data-raw
mp.messaging.outgoing.genetic-data-raw-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.genetic-data-raw-out.bootstrap.servers=${kafka.bootstrap.servers}

# Kafka Consumer Configuration - Annotated Results (ADR-001: WebSocket consumes)
mp.messaging.incoming.genetic-data-annotated-in.connector=smallrye-kafka
mp.messaging.incoming.genetic-data-annotated-in.topic=genetic-data-annotated
mp.messaging.incoming.genetic-data-annotated-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.genetic-data-annotated-in.bootstrap.servers=${kafka.bootstrap.servers}
mp.messaging.incoming.genetic-data-annotated-in.group.id=websocket-results-service-group

# Health Check Configuration
quarkus.health.enabled=true
quarkus.health.openapi.included=true

# Metrics Configuration
quarkus.micrometer.enabled=true
quarkus.micrometer.export.prometheus.enabled=true

# Logging Configuration
quarkus.log.level=INFO
quarkus.log.category."com.redhat.healthcare".level=DEBUG
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n

# CloudEvents Configuration
cloudevents.source=/genetic-simulator/websocket-local
cloudevents.type.prefix=com.healthcare.genetic

# Local Kafka Consumer Stability Configuration
mp.messaging.incoming.genetic-data-annotated-in.session.timeout.ms=30000
mp.messaging.incoming.genetic-data-annotated-in.heartbeat.interval.ms=10000
mp.messaging.incoming.genetic-data-annotated-in.max.poll.interval.ms=300000
mp.messaging.incoming.genetic-data-annotated-in.rebalance.timeout.ms=60000

# Development Configuration
quarkus.dev.ui.enabled=true
quarkus.swagger-ui.always-include=true

# CORS Configuration for local testing
quarkus.http.cors=true
quarkus.http.cors.origins=*
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with

# ADR-001 Testing Notes:
# - This service ONLY handles WebSocket connections
# - Publishes raw genetic data to Kafka
# - Consumes annotated results from Kafka
# - NO VEP processing logic (moved to vep-service)
# - NO direct HTTP calls to VEP API
