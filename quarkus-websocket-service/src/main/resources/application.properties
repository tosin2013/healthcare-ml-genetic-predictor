# Application Configuration
quarkus.application.name=genetic-risk-predictor-websocket
quarkus.application.version=1.0.0

# HTTP Configuration
quarkus.http.host=0.0.0.0
quarkus.http.port=8080

# WebSocket Configuration
quarkus.websockets-next.server.supported-subprotocols=genetics-v1
# Increase WebSocket message size limits for big data mode (50MB for large genetic sequences)
quarkus.http.limits.max-body-size=50M
quarkus.websockets.max-frame-size=52428800
# WebSocket timeout configuration - Extended for VEP processing + Kafka delay
quarkus.websockets.timeout=900
# Session keepalive configuration
quarkus.websockets.idle-timeout=900

# Kafka Bootstrap Servers
kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

# Kafka Producer Configuration - Multi-Topic Architecture
# Normal Mode: Pod scaling only
mp.messaging.outgoing.genetic-data-raw-out.connector=smallrye-kafka
mp.messaging.outgoing.genetic-data-raw-out.topic=genetic-data-raw
mp.messaging.outgoing.genetic-data-raw-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.genetic-data-raw-out.bootstrap.servers=${kafka.bootstrap.servers}

# Big Data Mode: Pod + memory scaling
mp.messaging.outgoing.genetic-bigdata-raw-out.connector=smallrye-kafka
mp.messaging.outgoing.genetic-bigdata-raw-out.topic=genetic-bigdata-raw
mp.messaging.outgoing.genetic-bigdata-raw-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.genetic-bigdata-raw-out.bootstrap.servers=${kafka.bootstrap.servers}

# Node Scale Mode: Cluster autoscaler triggering
mp.messaging.outgoing.genetic-nodescale-raw-out.connector=smallrye-kafka
mp.messaging.outgoing.genetic-nodescale-raw-out.topic=genetic-nodescale-raw
mp.messaging.outgoing.genetic-nodescale-raw-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.genetic-nodescale-raw-out.bootstrap.servers=${kafka.bootstrap.servers}

# Kafka Lag Mode: Consumer lag-based scaling demonstration
mp.messaging.outgoing.genetic-lag-demo-raw-out.connector=smallrye-kafka
mp.messaging.outgoing.genetic-lag-demo-raw-out.topic=genetic-lag-demo-raw
mp.messaging.outgoing.genetic-lag-demo-raw-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.genetic-lag-demo-raw-out.bootstrap.servers=${kafka.bootstrap.servers}

# Note: genetic-data-processed-in removed - not used in current implementation
# The service directly consumes genetic-data-annotated-in from VEP service

# Health Check Configuration
quarkus.health.enabled=true
quarkus.health.openapi.included=true

# Metrics Configuration
quarkus.micrometer.enabled=true
quarkus.micrometer.export.prometheus.enabled=true

# Logging Configuration
quarkus.log.level=INFO
quarkus.log.category."com.redhat.healthcare".level=DEBUG
quarkus.log.console.json=false

# Security Configuration (for future HIPAA compliance)
quarkus.security.auth.enabled-in-dev-mode=false

# CloudEvents Configuration
cloudevents.source=/genetic-simulator/websocket
cloudevents.type.prefix=com.healthcare.genetic

# Feature Flags Configuration
# Kafka Lag Mode - Multi-dimensional Pod Autoscaler (AEP-5342) Development Phase
healthcare.ml.features.kafka-lag-mode.enabled=${KAFKA_LAG_MODE_ENABLED:true}
healthcare.ml.features.multi-dimensional-autoscaler.enabled=${MULTI_DIMENSIONAL_AUTOSCALER_ENABLED:false}

# Local Development Mock Configuration
healthcare.ml.local.mock.enabled=${LOCAL_MOCK_ENABLED:false}
healthcare.ml.local.mock.node-scale.enabled=${LOCAL_MOCK_NODE_SCALE_ENABLED:false}
healthcare.ml.local.mock.kafka-lag.enabled=${LOCAL_MOCK_KAFKA_LAG_ENABLED:false}

# ADR-001: VEP configuration moved to separate vep-service
# WebSocket service only handles WebSocket connections and Kafka messaging

# ADR-001: Raw genetic data consumer moved to vep-service
# ADR-001: Annotated genetic data producer moved to vep-service
# WebSocket service only publishes raw data and consumes annotated results

# Kafka Consumer Configuration - Annotated Genetic Data for WebSocket Results
mp.messaging.incoming.genetic-data-annotated-in.connector=smallrye-kafka
mp.messaging.incoming.genetic-data-annotated-in.topic=genetic-data-annotated
mp.messaging.incoming.genetic-data-annotated-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.genetic-data-annotated-in.bootstrap.servers=${kafka.bootstrap.servers}
mp.messaging.incoming.genetic-data-annotated-in.group.id=websocket-results-service-group

# Kafka Consumer Stability Configuration (prevent rebalancing storms)
# Session timeout - how long broker waits before considering consumer dead
# ADR-001: genetic-data-raw-in moved to vep-service
mp.messaging.incoming.genetic-data-annotated-in.session.timeout.ms=30000

# Heartbeat interval - how often consumer sends heartbeat (should be 1/3 of session timeout)
# ADR-001: genetic-data-raw-in moved to vep-service
mp.messaging.incoming.genetic-data-annotated-in.heartbeat.interval.ms=10000

# Max poll interval - maximum time between poll() calls
# ADR-001: genetic-data-raw-in moved to vep-service
mp.messaging.incoming.genetic-data-annotated-in.max.poll.interval.ms=300000

# Rebalance timeout - how long to wait for rebalance to complete
# ADR-001: genetic-data-raw-in moved to vep-service
mp.messaging.incoming.genetic-data-annotated-in.rebalance.timeout.ms=60000

# Test Profile Configuration for Threading Tests
# Use local Kafka for tests (will be mocked in actual tests)
%test.kafka.bootstrap.servers=localhost:9092

# Test application configuration
%test.quarkus.application.name=genetic-risk-predictor-websocket-test
%test.quarkus.http.test-port=0

# Test logging configuration for debugging threading issues
%test.quarkus.log.level=INFO
%test.quarkus.log.category."com.redhat.healthcare".level=DEBUG
