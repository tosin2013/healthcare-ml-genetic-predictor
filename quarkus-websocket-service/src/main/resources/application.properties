# Application Configuration
quarkus.application.name=genetic-risk-predictor-websocket
quarkus.application.version=1.0.0

# HTTP Configuration
quarkus.http.host=0.0.0.0
quarkus.http.port=8080

# WebSocket Configuration
quarkus.websockets-next.server.supported-subprotocols=genetics-v1

# Kafka Bootstrap Servers
kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

# Kafka Producer Configuration - Raw Genetic Data
mp.messaging.outgoing.genetic-data-raw-out.connector=smallrye-kafka
mp.messaging.outgoing.genetic-data-raw-out.topic=genetic-data-raw
mp.messaging.outgoing.genetic-data-raw-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.genetic-data-raw-out.bootstrap.servers=${kafka.bootstrap.servers}

# Note: genetic-data-processed-in removed - not used in current implementation
# The service directly consumes genetic-data-annotated-in from VEP service

# Health Check Configuration
quarkus.health.enabled=true
quarkus.health.openapi.included=true

# Metrics Configuration
quarkus.micrometer.enabled=true
quarkus.micrometer.export.prometheus.enabled=true

# Logging Configuration
quarkus.log.level=INFO
quarkus.log.category."com.redhat.healthcare".level=DEBUG
quarkus.log.console.json=false

# Security Configuration (for future HIPAA compliance)
quarkus.security.auth.enabled-in-dev-mode=false

# CloudEvents Configuration
cloudevents.source=/genetic-simulator/websocket
cloudevents.type.prefix=com.healthcare.genetic

# VEP REST Client Configuration
vep-api/mp-rest/url=${VEP_API_URL:https://rest.ensembl.org}
vep-api/mp-rest/scope=jakarta.inject.Singleton
vep-api/mp-rest/connectTimeout=5000
vep-api/mp-rest/readTimeout=10000
vep-api/mp-rest/maxRetries=3
vep-api/mp-rest/retryDelay=1000

# VEP Service Configuration
vep.service.enabled=${VEP_SERVICE_ENABLED:true}
vep.service.batch-size=${VEP_BATCH_SIZE:10}
vep.service.cache-enabled=${VEP_CACHE_ENABLED:true}
vep.service.fallback-enabled=${VEP_FALLBACK_ENABLED:true}

# Kafka Consumer Configuration - Raw Genetic Data for VEP Processing
mp.messaging.incoming.genetic-data-raw-in.connector=smallrye-kafka
mp.messaging.incoming.genetic-data-raw-in.topic=genetic-data-raw
mp.messaging.incoming.genetic-data-raw-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.genetic-data-raw-in.bootstrap.servers=${kafka.bootstrap.servers}
mp.messaging.incoming.genetic-data-raw-in.group.id=vep-annotation-service-group

# Kafka Producer Configuration - Annotated Genetic Data
mp.messaging.outgoing.genetic-data-annotated-out.connector=smallrye-kafka
mp.messaging.outgoing.genetic-data-annotated-out.topic=genetic-data-annotated
mp.messaging.outgoing.genetic-data-annotated-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.genetic-data-annotated-out.bootstrap.servers=${kafka.bootstrap.servers}

# Kafka Consumer Configuration - Annotated Genetic Data for WebSocket Results
mp.messaging.incoming.genetic-data-annotated-in.connector=smallrye-kafka
mp.messaging.incoming.genetic-data-annotated-in.topic=genetic-data-annotated
mp.messaging.incoming.genetic-data-annotated-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.genetic-data-annotated-in.bootstrap.servers=${kafka.bootstrap.servers}
mp.messaging.incoming.genetic-data-annotated-in.group.id=websocket-results-service-group

# Kafka Consumer Stability Configuration (prevent rebalancing storms)
# Session timeout - how long broker waits before considering consumer dead
mp.messaging.incoming.genetic-data-raw-in.session.timeout.ms=30000
mp.messaging.incoming.genetic-data-annotated-in.session.timeout.ms=30000
mp.messaging.incoming.words-in.session.timeout.ms=30000

# Heartbeat interval - how often consumer sends heartbeat (should be 1/3 of session timeout)
mp.messaging.incoming.genetic-data-raw-in.heartbeat.interval.ms=10000
mp.messaging.incoming.genetic-data-annotated-in.heartbeat.interval.ms=10000
mp.messaging.incoming.words-in.heartbeat.interval.ms=10000

# Max poll interval - maximum time between poll() calls
mp.messaging.incoming.genetic-data-raw-in.max.poll.interval.ms=300000
mp.messaging.incoming.genetic-data-annotated-in.max.poll.interval.ms=300000
mp.messaging.incoming.words-in.max.poll.interval.ms=300000

# Rebalance timeout - how long to wait for rebalance to complete
mp.messaging.incoming.genetic-data-raw-in.rebalance.timeout.ms=60000
mp.messaging.incoming.genetic-data-annotated-in.rebalance.timeout.ms=60000
mp.messaging.incoming.words-in.rebalance.timeout.ms=60000
